//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WSClient.ApplicationWS
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDTO", Namespace="http://schemas.datacontract.org/2004/07/WS.Unit06.User.Application.Model")]
    public partial class UserDTO : object
    {
        
        private string EmailField;
        
        private int IdField;
        
        private string NameField;
        
        private string PasswordField;
        
        private string fullNameGroupField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email
        {
            get
            {
                return this.EmailField;
            }
            set
            {
                this.EmailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fullNameGroup
        {
            get
            {
                return this.fullNameGroupField;
            }
            set
            {
                this.fullNameGroupField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ws.unit06.user/application/", ConfigurationName="WSClient.ApplicationWS.IApplicationServices")]
    public interface IApplicationServices
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.unit06.user/application/IApplicationServices/GetUser", ReplyAction="http://ws.unit06.user/application/IApplicationServices/GetUserResponse")]
        System.Threading.Tasks.Task<WSClient.ApplicationWS.UserDTO> GetUserAsync(string name, string email, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.unit06.user/application/IApplicationServices/getUsers", ReplyAction="http://ws.unit06.user/application/IApplicationServices/getUsersResponse")]
        System.Threading.Tasks.Task<WSClient.ApplicationWS.UserDTO[]> getUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.unit06.user/application/IApplicationServices/CreateUser", ReplyAction="http://ws.unit06.user/application/IApplicationServices/CreateUserResponse")]
        System.Threading.Tasks.Task CreateUserAsync(WSClient.ApplicationWS.UserDTO userDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.unit06.user/application/IApplicationServices/UpdateUser", ReplyAction="http://ws.unit06.user/application/IApplicationServices/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(WSClient.ApplicationWS.UserDTO userDTO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.unit06.user/application/IApplicationServices/GetUserById", ReplyAction="http://ws.unit06.user/application/IApplicationServices/GetUserByIdResponse")]
        System.Threading.Tasks.Task<WSClient.ApplicationWS.UserDTO> GetUserByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.unit06.user/application/IApplicationServices/DeleteUser", ReplyAction="http://ws.unit06.user/application/IApplicationServices/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.unit06.user/application/IApplicationServices/GetOneUser", ReplyAction="http://ws.unit06.user/application/IApplicationServices/GetOneUserResponse")]
        System.Threading.Tasks.Task<WSClient.ApplicationWS.UserDTO> GetOneUserAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IApplicationServicesChannel : WSClient.ApplicationWS.IApplicationServices, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class ApplicationServicesClient : System.ServiceModel.ClientBase<WSClient.ApplicationWS.IApplicationServices>, WSClient.ApplicationWS.IApplicationServices
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ApplicationServicesClient() : 
                base(ApplicationServicesClient.GetDefaultBinding(), ApplicationServicesClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IApplicationServices.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationServicesClient(EndpointConfiguration endpointConfiguration) : 
                base(ApplicationServicesClient.GetBindingForEndpoint(endpointConfiguration), ApplicationServicesClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationServicesClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ApplicationServicesClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationServicesClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ApplicationServicesClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ApplicationServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<WSClient.ApplicationWS.UserDTO> GetUserAsync(string name, string email, string pw)
        {
            return base.Channel.GetUserAsync(name, email, pw);
        }
        
        public System.Threading.Tasks.Task<WSClient.ApplicationWS.UserDTO[]> getUsersAsync()
        {
            return base.Channel.getUsersAsync();
        }
        
        public System.Threading.Tasks.Task CreateUserAsync(WSClient.ApplicationWS.UserDTO userDTO)
        {
            return base.Channel.CreateUserAsync(userDTO);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(WSClient.ApplicationWS.UserDTO userDTO)
        {
            return base.Channel.UpdateUserAsync(userDTO);
        }
        
        public System.Threading.Tasks.Task<WSClient.ApplicationWS.UserDTO> GetUserByIdAsync(int id)
        {
            return base.Channel.GetUserByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(int id)
        {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public System.Threading.Tasks.Task<WSClient.ApplicationWS.UserDTO> GetOneUserAsync(string name)
        {
            return base.Channel.GetOneUserAsync(name);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IApplicationServices))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IApplicationServices))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:9091/ApplicationServices.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ApplicationServicesClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IApplicationServices);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ApplicationServicesClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IApplicationServices);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IApplicationServices,
        }
    }
}
